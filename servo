#!/usr/bin/env python3
#
# This file is part of servod.
#
# servod is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# servod is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with servod.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for controlling a Physik Instrumente C-863 servo controller"""

import datetime
import glob
import json
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.servo import Config, CommandStatus, ServoState


SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

CHANNELS = [1, 2]
CHANNELS_ARG_STRING = '1|2'


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'SERVOD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['SERVOD_CONFIG_PATH'])
    else:
        # Load the config file defined in the SERVOD_CONFIG_PATH environment variable or from the
        # default system location (/etc/servod/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/servod/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  f'Run as SERVOD_CONFIG_PATH=/path/to/config.json {SCRIPT_NAME} <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))
    sys.exit(ret)


def print_status(config, _):
    """Prints a human-readable summary of the servo status"""
    with config.daemon.connect() as servod:
        data = servod.report_status()

    if data is not None:
        date = datetime.datetime.strptime(data['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received ' + TFmt.Bold + str(date) + TFmt.Clear + ':')

    # TODO
    return 0


def print_json(config, _):
    """Prints a machine-readable summary of the servo status"""
    with config.daemon.connect() as servod:
        print(json.dumps(servod.report_status() or {}))

    return 0


def set_position(config, args):
    """Request to move a specific step position"""
    try:
        if len(args) == 1:
            position = int(args[0])

            try:
                with config.daemon.connect(timeout=0) as servod:
                    return servod.move(position, relative=False)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as servod:
                    return servod.stop()
    except ValueError:
        pass
    print(f'usage: {SCRIPT_NAME} set <step position>')
    return -1


def offset_position(config, args):
    """Request to move by a specific step delta"""
    try:
        if len(args) == 1:
            delta = int(args[0])

            try:
                with config.daemon.connect(timeout=0) as servod:
                    return servod.move(delta, relative=True)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as servod:
                    return servod()
    except ValueError:
        pass
    print(f'usage: {SCRIPT_NAME} offset <step delta>')
    return -1


def stop(config, _):
    """Stop movement"""
    with config.daemon.connect() as servod:
        return servod.stop()


def initialize(config, _):
    """Connect to the servo"""
    with config.daemon.connect() as servod:
        return servod.initialize()


def shutdown(config, _):
    """Disconnect from the servo"""
    with config.daemon.connect() as servod:
        return servod.shutdown()


def print_usage():
    """Prints the utility help"""
    print(f'usage: {SCRIPT_NAME} <command> [<args>]')
    print()
    print('general commands:')
    print('   set          request the servo to move to a given absolute position')
    print('   offset       request the servo to move by a given offset delta')
    print('   stop         request the servo to stop moving')
    print('   status       print a human-readable summary of the servo status')
    print('   json         print a machine-readable summary of the servo status')
    print('engineering commands:')
    print('   init         connect to the servo')
    print('   kill         disconnect from the servo')
    print()

    return 0


if __name__ == '__main__':
    commands = {
        'set': set_position,
        'offset': offset_position,
        'stop': stop,
        'status': print_status,
        'json': print_json,
        'init': initialize,
        'kill': shutdown
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
